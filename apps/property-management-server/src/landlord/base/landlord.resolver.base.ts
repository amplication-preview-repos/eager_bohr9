/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Landlord } from "./Landlord";
import { LandlordCountArgs } from "./LandlordCountArgs";
import { LandlordFindManyArgs } from "./LandlordFindManyArgs";
import { LandlordFindUniqueArgs } from "./LandlordFindUniqueArgs";
import { CreateLandlordArgs } from "./CreateLandlordArgs";
import { UpdateLandlordArgs } from "./UpdateLandlordArgs";
import { DeleteLandlordArgs } from "./DeleteLandlordArgs";
import { LandlordService } from "../landlord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Landlord)
export class LandlordResolverBase {
  constructor(
    protected readonly service: LandlordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Landlord",
    action: "read",
    possession: "any",
  })
  async _landlordsMeta(
    @graphql.Args() args: LandlordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Landlord])
  @nestAccessControl.UseRoles({
    resource: "Landlord",
    action: "read",
    possession: "any",
  })
  async landlords(
    @graphql.Args() args: LandlordFindManyArgs
  ): Promise<Landlord[]> {
    return this.service.landlords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Landlord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Landlord",
    action: "read",
    possession: "own",
  })
  async landlord(
    @graphql.Args() args: LandlordFindUniqueArgs
  ): Promise<Landlord | null> {
    const result = await this.service.landlord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Landlord)
  @nestAccessControl.UseRoles({
    resource: "Landlord",
    action: "create",
    possession: "any",
  })
  async createLandlord(
    @graphql.Args() args: CreateLandlordArgs
  ): Promise<Landlord> {
    return await this.service.createLandlord({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Landlord)
  @nestAccessControl.UseRoles({
    resource: "Landlord",
    action: "update",
    possession: "any",
  })
  async updateLandlord(
    @graphql.Args() args: UpdateLandlordArgs
  ): Promise<Landlord | null> {
    try {
      return await this.service.updateLandlord({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Landlord)
  @nestAccessControl.UseRoles({
    resource: "Landlord",
    action: "delete",
    possession: "any",
  })
  async deleteLandlord(
    @graphql.Args() args: DeleteLandlordArgs
  ): Promise<Landlord | null> {
    try {
      return await this.service.deleteLandlord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
