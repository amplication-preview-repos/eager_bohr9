/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Landlord as PrismaLandlord } from "@prisma/client";

export class LandlordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LandlordCountArgs, "select">): Promise<number> {
    return this.prisma.landlord.count(args);
  }

  async landlords<T extends Prisma.LandlordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LandlordFindManyArgs>
  ): Promise<PrismaLandlord[]> {
    return this.prisma.landlord.findMany<Prisma.LandlordFindManyArgs>(args);
  }
  async landlord<T extends Prisma.LandlordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LandlordFindUniqueArgs>
  ): Promise<PrismaLandlord | null> {
    return this.prisma.landlord.findUnique(args);
  }
  async createLandlord<T extends Prisma.LandlordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LandlordCreateArgs>
  ): Promise<PrismaLandlord> {
    return this.prisma.landlord.create<T>(args);
  }
  async updateLandlord<T extends Prisma.LandlordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LandlordUpdateArgs>
  ): Promise<PrismaLandlord> {
    return this.prisma.landlord.update<T>(args);
  }
  async deleteLandlord<T extends Prisma.LandlordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LandlordDeleteArgs>
  ): Promise<PrismaLandlord> {
    return this.prisma.landlord.delete(args);
  }
}
